local
  $(SML_LIB)/basis/basis.mlb (* import the Basis Library *)
  $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb  (* import the SML/NJ
Utility Library *)
in
  open Array
open Math
open Option
open Queue
open HashTable
fun convertToString(arr)=
        let fun conv(arr,n,L)= if n = Array.length(arr) then implode(rev(L)) else
                conv(arr,n+1,sub(arr,n)::L)
         in
                conv(arr,0,[])
          end 



val q=mkQueue(): (string * string) queue
		  
fun roll_right(a,0) =convertToString(a)
    | roll_right(a,1)=
         
          
                (let
                    val tmp1 = sub(a,0)
                    val tmp2 = sub(a,3)       
                    val tmp3 = sub(a,5)
                in
                     update(a,0,sub(a,2)); 
                     update(a,3,tmp1);
                     update(a,5,tmp2);
                     update(a,2,tmp3)
                 end ;
                
                        roll_right(a,0))
                        
          | roll_right(a,2)=( 
                       let 
                           val tmp1 = sub(a,1)
                           val tmp2 = sub(a,4)       
                           val tmp3 = sub(a,6)
                       in 
                           update(a,1,sub(a,3));
                           update(a,4,tmp1);
                           update(a,6,tmp2);
                           update(a,3,tmp3)
                        end;roll_right(a,0))                   
          | roll_right(a,3)=( 
                        let 
                           val tmp1 = sub(a,5)
                           val tmp2 = sub(a,8)       
                           val tmp3 = sub(a,10)
                        in
                           update(a,5,sub(a,7));
                           update(a,8,tmp1);
                           update(a,10,tmp2);
                           update(a,7,tmp3)
                        end;roll_right(a,0))                   
          | roll_right(a,4) =(         
                        let 
                           val tmp1 = sub(a,6)
                           val tmp2 = sub(a,9)       
                           val tmp3 = sub(a,11)
                        in
                           update(a,6,sub(a,8));
                           update(a,9,tmp1);
                           update(a,11,tmp2);
                           update(a,8,tmp3)
                        end;roll_right(a,0)) 
fun char_to_int(chr)=
        case chr of 
                  #"G" => 0
                | #"g" => 1
                | #"b" => 2
                | #"r" => 3
                | _ => 4

fun rollstring(str,i)=
		roll(fromList(explode str ),i)	  

fun init(q,s)=(enqueue(q,(s,"")))

val hashFunction = HashString.hashString;

val myHashTable : (string, string) HashTable.hash_table = 
         HashTable.mkTable (hashFunction, op=) (1, Fail "NOT_FOUND");  

fun add_elem(el:(string * string ),i,())= if i=5 then ()
	else
	     let 
			val ch_i=rollstring((#1 el),i)
			val k = (ch_i,(#2 el)^Int.toString(i))

		 in 
			if HashTable.find myHashTable ch_i  = NONE then add_elem(el,i+1,(Queue.enqueue(q,k);HashTable.insert myHashTable((ch_i,ch_i))))
														else add_elem(el,i+1,())
		end

  fun bfs(node,())=
        
                     if String.compare((#1 node),"bgbGgGGrGyry")=EQUAL then node else bfs(dequeue(q),add_elem(node,1,()));
                    
                  		
fun main()=
        let 
                val args=hd(CommandLine.arguments())
                val _ = init(q, args)
                val h = head(q)
                val _ = HashTable.insert myHashTable (( #1 h),(#1 h))  
                val sol=bfs(head(q),())
         in
                print( ( #2 sol)^"\n")
         end    
 val _ = main()
 val _ = OS.Process.exit(OS.Process.success)        
  (* SML file making use of the Basis Library and the SML/NJ
Utility Library *)
end
